# RSIDTrade - AI Trading System Documentation

## System Overview
RSIDTrade is an AI-powered trading bot framework for cryptocurrency markets. The system combines machine learning models with technical analysis to generate trading signals and execute trades both in backtest and live environments.

## Main Components
- Data processing and feature engineering
- Machine learning model training and optimization
- Trading strategy development and backtesting
- Live trading execution
- Web dashboard for monitoring and control

## Installation

### Dependencies
Use the provided environment.yml file to create a conda environment:
```
conda env create -f environment.yml
conda activate rsidtrade
```

## Data Acquisition

### Fetch historical data
```
python data_fetcher.py --symbols BTCUSDT ETHUSDT --timeframes 1h 4h 1d --start-date 2020-01-01 --end-date 2023-12-31
```

### List available symbols
```
python data_fetcher.py --list-symbols
```

## Running the System

### Train on a single dataset with optimizationpython run_single.py --data-path /Users/mrsmoothy/Desktop/rsidtrade/binance_data_sets/BTCUSDT_1h_data_2018_to_2025.csv --optimize-model --optimize-strategy --visualize

```
```

### Train on a single dataset without optimization
```
python run_single.py --data-path /Users/mrsmoothy/Desktop/rsidtrade/binance_data_sets/BTCUSDT_1h_data_2018_to_2025.csv --visualize
```

### Run backtest only on existing model
```
python run_single.py --data-path /Users/mrsmoothy/Desktop/rsidtrade/binance_data_sets/BTCUSDT_1h_data_2018_to_2025.csv --backtest-only --visualize
```

### Train on multiple symbols and timeframes
```
python run_batch.py --symbols BTCUSDT ETHUSDT --timeframes 1h 4h --start-date 2020-01-01 --end-date 2023-12-31
```

### Live trading
```
python live_trading.py --exchange binance --api-key YOUR_API_KEY --api-secret YOUR_API_SECRET --testnet --symbols BTCUSDT ETHUSDT --timeframes 1h 4h
```

### Start web dashboard
```
python app.py
```

## Module Documentation

### data_processor.py
Handles loading and preprocessing data files, including train/test splitting and sequence creation.

### feature_engineering.py
Generates technical indicators and advanced features from raw price data.

### model.py
Implements deep learning models for price prediction including LSTM, GRU, CNN, Transformer, and ensemble architectures.

### strategy.py
Contains trading strategy implementations that use model predictions to generate signals.

### optimizer.py
Provides hyperparameter optimization for both models and trading strategies.

### backtest.py
Backtesting engine to evaluate strategy performance on historical data.

### live_trading.py
Connects to cryptocurrency exchanges for live trading using trained models.

### visualize.py
Creates performance visualizations and reports.

### app.py
Web dashboard for monitoring and controlling the trading system.

## Configuration

Key parameters can be adjusted in config.py, including:
- Data directories and paths
- Model architecture and hyperparameters
- Trading parameters (fees, position sizes, etc.)
- Optimization settings
- Visualization options

For further assistance, consult the individual module documentation or seek support in the project repository.